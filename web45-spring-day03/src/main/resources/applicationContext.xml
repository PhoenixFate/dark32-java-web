<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">

    <!--
        spring容器只会维护一个PropertyPlaceholderConfigurer的bean实例，当spring发现容器中有一个该实例后，就会忽略其余的，所以，该标签只能配置一个，多余的spring会自动忽略。
        问题知道了，那么怎么解决呢？
        度娘的说法很简单，只需要在context:property-placeholder标签中添加一个属性ignore-unresolvable="true"即可！
        事实证明，确实，这样的做法大部分情况下就解决了上述报的错误，只要在所有的context:property-placeholder标签上都加上ignore-unresolvable="true"属性就可以了。
    -->

    <!--指定spring读取database.properties-->
    <context:property-placeholder location="classpath:database.properties" ignore-unresolvable="true"/>

    <!--1.将连接池放入spring容器-->
    <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" name="dataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--2.将jdbcTemplate放入Spring容器-->
    <bean class="org.springframework.jdbc.core.JdbcTemplate" name="jdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--3.将UserDao放入spring容器-->
    <bean class="com.phoenix.dao.impl.UserDaoImpl" name="userDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>

    <!--3.将UserDao放入spring容器（使用jdbcTemplate的方式二）-->
    <bean class="com.phoenix.dao.impl.UserDaoImpl2" name="userDao2">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!--使用xml配置aop start-->

    <!--事务-->
    <!--事务核心管理器，封装类所有事务操作，依赖于连接池-->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" name="transactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!-- 编码式操作事务，需要一个事务模板对象(不重要)-->
    <bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!--
        事务隔离级别，就是为了解决上面几种问题而诞生的。为什么要有事务隔离级别，因为事务隔离级别越高，在并发下会产生的问题就越少，但同时付出的性能消耗也将越大，因此很多时候必须在并发性和性能之间做一个权衡。所以设立了几种事务隔离级别，以便让不同的项目可以根据自己项目的并发情况选择合适的事务隔离级别，对于在事务隔离级别之外会产生的并发问题，在代码中做补偿。
        事务隔离级别有4种，但是像Spring会提供给用户5种，来看一下：
        1、DEFAULT
        默认隔离级别，每种数据库支持的事务隔离级别不一样，如果Spring配置事务时将isolation设置为这个值的话，那么将使用底层数据库的默认事务隔离级别。顺便说一句，如果使用的MySQL，可以使用"select @@tx_isolation"来查看默认的事务隔离级别
        2、READ_UNCOMMITTED
        读未提交，即能够读取到没有被提交的数据，所以很明显这个级别的隔离机制无法解决脏读、不可重复读、幻读中的任何一种，因此很少使用

        3、READ_COMMITED
        读已提交，即能够读到那些已经提交的数据，自然能够防止脏读，但是无法限制不可重复读和幻读
        4、REPEATABLE_READ
        重复读取，即在数据读出来之后加锁，类似"select * from XXX for update"，明确数据读取出来就是为了更新用的，所以要加一把锁，防止别人修改它。REPEATABLE_READ的意思也类似，读取了一条数据，这个事务不结束，别的事务就不可以改这条记录，这样就解决了脏读、不可重复读的问题，但是幻读的问题还是无法解决
        5、SERLALIZABLE
        串行化，最高的事务隔离级别，不管多少事务，挨个运行完一个事务的所有子事务之后才可以执行另外一个事务里面的所有子事务，这样就解决了脏读、不可重复读和幻读的问题了
        网上专门有图用表格的形式列出了事务隔离级别解决的并发问题：
    -->
    <!--配置事务通知-->
    <tx:advice transaction-manager="transactionManager" id="txAdvisor">
        <tx:attributes>
            <!--以方法为单位，指定方法应用的事务属性
                isolation：隔离级别
                propagation：传播级别
            -->
            <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="transfer*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
        </tx:attributes>
    </tx:advice>

    <!--将通知织入目标对象-->
    <!--配置织入-->
    <aop:config>
        <!--配置切入点表达式-->
        <aop:pointcut id="pointcut" expression="execution(* com.phoenix.service.impl.*ServiceImpl.*(..))"/>
        <!--配置切面：通知+切入点
            advice-ref：通知的名称
            pointcut-ref：切入点的名称
        -->
        <aop:advisor advice-ref="txAdvisor" pointcut-ref="pointcut"/>
    </aop:config>

    <!--使用xml配置aop end-->


    <bean class="com.phoenix.dao.impl.AccountDaoImpl" name="accountDao">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean class="com.phoenix.service.impl.AccountServiceImpl" name="accountService">
        <property name="accountDao" ref="accountDao"/>
        <property name="transactionTemplate" ref="transactionTemplate"/>
    </bean>

</beans>