<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">

    <!--指定spring读取database.properties-->
    <context:property-placeholder location="classpath:database.properties" ignore-unresolvable="true"/>

    <!--1.将连接池放入spring容器-->
    <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" name="dataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--2.将jdbcTemplate放入Spring容器-->
    <bean class="org.springframework.jdbc.core.JdbcTemplate" name="jdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--3.将UserDao放入spring容器-->
    <bean class="com.phoenix.dao.impl.UserDaoImpl" name="userDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <!--<property name="database" ref="dataSource"/>-->
    </bean>


    <!--事务-->
    <!--事务核心管理器，封装类所有事务操作，依赖于连接池-->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" name="transactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 编码式操作事务，需要一个事务模板对象-->
    <bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!--配置事务通知-->
    <tx:advice transaction-manager="transactionManager" id="txAdvisor">
        <tx:attributes>
            <!--以方法为单位，指定方法应用的事务属性
                isolation：隔离级别
                propagation：传播级别
            -->
            <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
            <tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>

            <tx:method name="transfer*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
        </tx:attributes>
    </tx:advice>

    <!--配置织入-->
    <aop:config>
        <!--配置切入点表达式-->
        <aop:pointcut id="pointcut" expression="execution(* com.phoenix.service.impl.*ServiceImpl.*(..))"/>
        <!--配置切面：通知+切入点
            advice-ref：通知的名称
            pointcut-ref：切入点的名称
        -->
        <aop:advisor advice-ref="txAdvisor" pointcut-ref="pointcut"/>
    </aop:config>


    <bean class="com.phoenix.dao.impl.AccountDaoImpl" name="accountDao">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean class="com.phoenix.service.impl.AccountServiceImpl" name="accountService">
        <property name="accountDao" ref="accountDao"/>
        <property name="transactionTemplate" ref="transactionTemplate"/>
    </bean>

</beans>