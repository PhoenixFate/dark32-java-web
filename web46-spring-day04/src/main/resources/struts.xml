<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
        "http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
    <!--struts2不再负责对象的创建-->
    <!--将action的创建交给Spring容器-->
    <!--这个需要配置-->
    <constant name="struts.objectFactory" value="spring"/>
    <!--spring负责装配action的依赖属性，例如service等-->
    <!--这个默认是打开的，可以不配置-->
    <constant name="struts.objectFactory.spring.autoWire" value="name"/>


    <!-- i18n:国际化. 解决post提交乱码 -->
    <constant name="struts.i18n.encoding" value="UTF-8"/>
    <!-- 指定反问action时的后缀名
        http://localhost:8080/struts2_day01/hello/HelloAction.do
    -->
    <constant name="struts.action.extension" value="action,do,html,,"/>
    <!-- 指定struts2是否以开发模式运行
            1.热加载主配置.(不需要重启即可生效)
            2.提供更多错误信息输出,方便开发时的调试
     -->
    <constant name="struts.devMode" value="true"/>

    <package name="crm" namespace="/crm" extends="struts-default">
        <global-exception-mappings>
            <exception-mapping result="error" exception="java.lang.RuntimeException"/>
        </global-exception-mappings>

        <!--默认整个 package里面所有的action 会调用上面配置的interceptor-->
        <!--整合方案1 不推荐
            class属性上仍然配置action的完整类名
            struts2仍然创建action，但是由spring来配置action中的属性
        -->
        <!--<action name="UserAction_*" class="com.phoenix.web.UserAction" method="{1}" >-->
        <!--    <result name="success" type="dispatcher" >/success.jsp</result>-->
        <!--</action>-->
        <!--
            整合方案2：class属性上填写spring中action对象beanName
                    完全由spring来管理action的生命周期包括action的创建
            注意：需要手动组装action中的依赖属性
        -->
        <action name="UserAction_*" class="userAction" method="{1}">
            <result name="success" type="dispatcher">/success.jsp</result>
            <result name="toHome" type="redirect">/index.html</result>
            <result name="error" >/login.jsp</result>
        </action>
    </package>

</struts>