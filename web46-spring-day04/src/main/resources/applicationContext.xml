<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">

    <!--指定spring读取database.properties-->
    <context:property-placeholder location="classpath:database.properties" ignore-unresolvable="true"/>
    <!--1.将连接池放入spring容器-->
    <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" name="dataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--将SessionFactory配置到spring中-->
    <!--加载hibernate配置的两种方案
        1.仍然使用外部的hibernate.cfg.xml配置信息
        2.在spring配置中放置hibernate配置信息
    -->
    <!--不重要-->
    <!--<bean class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" name="localSessionFactoryBean2">-->
    <!--    <property name="configLocation" value="classpath:hibernate.cfg.xml"/>-->
    <!--</bean>-->

    <!--重要-->
    <bean class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" name="localSessionFactoryBean">
        <!--将连接池注入到sessionFactory，hibernate从连接池获得连接-->
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <!--<prop key="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</prop>-->
                <!--&lt;!&ndash; 2.数据库url &ndash;&gt;-->
                <!--<prop key="hibernate.connection.url">jdbc:mysql://www.bytes-space.com:10307/darkhorse32_hibernate</prop>-->
                <!--&lt;!&ndash; 3.数据库连接用户名 &ndash;&gt;-->
                <!--<prop key="hibernate.connection.username">root</prop>-->
                <!--&lt;!&ndash; 4.数据库连接密码 &ndash;&gt;-->
                <!--<prop key="hibernate.connection.password">centos123qwer</prop>-->
                <!-- 5.数据库方言
                 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>

                <prop key="hibernate.show_sql">true</prop>
                <!-- 将hibernate生成的sql语句格式化(语法缩进) -->
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <!--引入orm源数据, 指定orm元数据包所在的包路径，spring会自动去读包中的所有配置-->
        <property name="mappingDirectoryLocations" value="classpath:com/phoenix/domain"/>
    </bean>


    <!--action
        注意：action对象一定是多例的，这样才符合struts2架构
    -->
    <bean class="com.phoenix.web.UserAction" name="userAction" scope="prototype">
        <property name="userService" ref="userService"/>
    </bean>
    <!--service-->
    <bean class="com.phoenix.service.impl.UserServiceImpl" name="userService"/>
    <!--dao-->
    <bean class="com.phoenix.dao.impl.UserDaoImpl" name="userDao">
        <!--注入sessionFactory-->
        <property name="sessionFactory" ref="localSessionFactoryBean"/>
    </bean>


    <!-- 核心事务管理器 -->
    <bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager" >
        <property name="sessionFactory" ref="localSessionFactoryBean" />
    </bean>
    <!--方式1：xml配置事务-->
    <!-- 配置通知 -->
    <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager" >
        <tx:attributes>
            <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice> -->
    <!-- 配置将通知织入目标对象
    配置切点
    配置切面 -->
    <!-- <aop:config>
        <aop:pointcut expression="execution(* cn.itcast.service.impl.*ServiceImpl.*(..))" id="txPc"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPc" />
    </aop:config> -->
    <!-- ========================================================================================= -->
    <!-- 开启注解事务 -->
    <!--方式二：注解配置事务-->
    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>