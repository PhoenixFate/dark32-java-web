<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
   <!-- 配置表与实体对象的关系 -->
   <!-- package属性:填写一个包名.在元素内部凡是需要书写完整类名的属性,可以直接写简答类名了. -->
<hibernate-mapping package="com.phoenix.domain" >
	<!-- 
		class元素: 配置实体与表的对应关系的
			name: 完整类名
			table:数据库表名
	 -->
	<class name="Customer" table="cst_customer" >
		<!-- id元素:配置主键映射的属性
				name: 填写主键对应属性名
				column(可选): 填写表中的主键列名.默认值:列名会默认使用属性名
				type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
						每个类型有三种填法: java类型|hibernate类型|数据库类型
				not-null(可选):配置该属性(列)是否不能为空. 默认值:false
				length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
		 -->
		<id name="customerId"  column="cust_id">
			<!-- 主键生成策略-->
			<!--主键自增策略：identity, 录入时不要指定主键-->
			<!--sequence:oracle中的主键自增策略-->
			<!--increment: 主键自增，hibernate来维护，每次插入前，先查询id最大值，+1作为新主键；（不推荐使用,效率以及线程安全问题）-->
			<!--hilo:高低位算法 ，由hibernate来维护，并且确保不重复-->
<!--			native: hilo+sequence+identity 三选一策略-->
<!--			uuid: 产生随机字符串作为主键; 主键类型必须为string类型-->
<!--			assigned: 自然主键生成策略, hibernate 不会维护主键，需要开发人员手动指定主键-->
			<generator class="native"/>
		</id>
		<!-- property元素:除id之外的普通属性映射
				name: 填写属性名
				column(可选): 填写列名
				type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
						有三种填法: java类型|hibernate类型|数据库类型
				not-null(可选):配置该属性(列)是否不能为空. 默认值:false
				length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
		 -->
		<property name="customerName" column="cust_name" />
<!--		<property name="customerName" column="cust_name" type="java.lang.String">-->
<!--			  <column name="cust_name" sql-type="varchar" /> -->
<!--		</property>-->
		<property name="customerSource" column="cust_source" />
		<property name="customerIndustry" column="cust_industry" />
		<property name="customerLevel" column="cust_level" />
		<property name="customerLinkman" column="cust_linkman" />
		<property name="customerPhone" column="cust_phone" />
		<property name="customerMobile" column="cust_mobile" />
	</class>
</hibernate-mapping>