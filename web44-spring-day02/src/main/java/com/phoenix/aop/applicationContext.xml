<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd ">


    <!--
    Joinpoint(连接点):所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点.
    Pointcut(切入点):所谓切入点是指我们要对哪些Joinpoint进行拦截的定义.
    Advice(通知/增强):所谓通知是指拦截到Joinpoint之后所要做的事情就是通知.通知分为前置通知,后置通知,异常通知,最终通知,环绕通知(切面要完成的功能)
    Introduction(引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field.
    Target(目标对象):代理的目标对象
    Weaving(织入):是指把增强应用到目标对象来创建新的代理对象的过程. spring采用动态代理织入，而AspectJ采用编译期织入和类装在期织入
    Proxy（代理）:一个类被AOP织入增强后，就产生一个结果代理类
    Aspect(切面): 是切入点和通知（引介）的结合
    -->

    <!--  1.配置目标对象  -->
    <bean name="userServiceTarget" class="com.phoenix.service.UserServiceImpl"/>

    <!--2.配置通知对象-->
    <bean name="myAdvice" class="com.phoenix.aspect.MyAdvice"/>
    <!-- 3.配置将通知织入目标对象   -->
    <aop:config>
        <!--配置切入点
            public void com.phoenix.service.UserServiceImpl.save()
            public 可以省略
            void 改为* 对返回值不做任何限制
            对返回值不做任何限制: * com.phoenix.service.UserServiceImpl.save()
            任何方法: * com.phoenix.service.UserServiceImpl.*()
            对参数不做任何限制 * com.phoenix.service.UserServiceImpl.*(..)
            任何service: * com.phoenix.service.*ServiceImpl.*(..)
            service下面任何子包: * com.phoenix.service..*ServiceImpl.*(..)
        -->
        <aop:pointcut id="pc" expression="execution(* com.phoenix.service..*ServiceImpl.*(..))"/>
        <aop:aspect ref="myAdvice">
            <!--前置通知-->
            <aop:before method="before" pointcut-ref="pc"/>
            <!--后置通知-->
            <aop:after-returning method="afterReturning" pointcut-ref="pc"/>
            <!--环绕通知-->
            <aop:around method="around" pointcut-ref="pc"/>
            <!--异常拦截通知-->
            <aop:after-throwing method="afterException" pointcut-ref="pc"/>
            <!--后置通知（有异常依然通知）-->
            <aop:after method="afterAnyWay" pointcut-ref="pc"/>
        </aop:aspect>
    </aop:config>

</beans>